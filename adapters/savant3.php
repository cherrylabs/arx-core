<?php
/**
    * Savant3 TPL adapters
    * @file
    *
    * @package
    * @author Daniel Sum
    * @link 	@endlink
    * @see
    * @description
    *
    * @code 	@endcode
    * @comments
    * @todo
*/

require_once DIR_VENDOR . DS . 'Savant3' . DS . 'Savant3.php' ;

class a_savant3 extends Savant3
{
    public function __construct()
    {
        return parent::__construct( func_get_args() );
    }

    protected function template($tpl = null, $debug = false)
    {
        // set to default template if none specified.
        if (is_null($tpl)) {
            $tpl = $this->__config['template'];
        }

        switch (true) {
            case (is_file($file = $tpl)):
            case (is_file($file = VIEWS.DS.$tpl.TPL)):
            case (is_file($file = ARX_VIEWS.DS.$tpl.TPL)):
                //as we assign do nothing
            break;

            default:
               dd::warning("$tpl is not found");
            break;
        }

        c_debug::info($file);

        // are we compiling source into a script?
        if ($this->__config['compiler']) {
            // compile the template source and get the path to the
            // compiled script (will be returned instead of the
            // source path)
            $result = call_user_func(
                array($this->__config['compiler'], 'compile'),
                $file
            );
        } else {
            // no compiling requested, use the source path
            $result = $file;
        }

        // is there a script from the compiler?
        if (! $result || $this->isError($result)) {
            // return an error, along with any error info
            // generated by the compiler.
            return $this->error(
                'ERR_COMPILER',
                array(
                    'template' => $tpl,
                    'compiler' => $result
                )
            );
        } else {
            // no errors, the result is a path to a script
            return $result;
        }
    }

} // cSavant3

if (!class_exists('tpl')) {
    class tpl extends a_savant3{}

    class tpl_plugin extends Savant3_Plugin
    {
        public function __construct()
        {
            return parent::__construct( func_get_args() );
        }

    } // cSavant3

    class tpl_filter extends Savant3_Filter
    {
        public function __construct()
        {
            return parent::__construct( func_get_args() );
        }

    } // cSavant3
} else { c_debug::notice('Other tpl class is already instantiate'); }
