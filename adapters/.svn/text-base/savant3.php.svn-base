<?php
/**
    * Savant3 TPL adapters
    * @file
    *
    * @package
    * @author Daniel Sum
    * @link 	@endlink
    * @see
    * @description
    *
    * @code 	@endcode
    * @comments
    * @todo
*/

require_once DIR_VENDOR . DS . 'Savant3' . DS . 'Savant3.php' ;

class a_savant3 extends Savant3
{

    protected $__config = array(
        'template_path' => array(),
        'resource_path' => array(),
        'error_text'    => "\n\ntemplate error, examine fetch() result\n\n",
        'exceptions'    => false,
        'autoload'      => false,
        'compiler'      => null,
        'filters'       => array(),
        'plugins'       => array(),
        'template'      => null,
        'plugin_conf'   => array(),
        'extract'       => true,
        'fetch'         => null,
        'escape'        => array('htmlspecialchars'),
    );

    public function __construct()
    {
        return parent::__construct( func_get_args() );
    }

    public function __get($sName){
        return $this->{$sName};
    }

    protected function template($tpl = null, $debug = false)
    {
        // set to default template if none specified.
        if (is_null($tpl)) {
            $tpl = $this->__config['template'];
        }

        switch (true) {
            case (is_file($file = $tpl)):
            case (is_file($file = VIEWS.DS.$tpl.TPL)):
            case (is_file($file = ARX_VIEWS.DS.$tpl.TPL)):
                //as we assign do nothing
            break;

            default:
               trigger_error("$tpl is not found");
            break;
        }

        c_debug::info($file);

        // are we compiling source into a script?
        if ($this->__config['compiler']) {
            // compile the template source and get the path to the
            // compiled script (will be returned instead of the
            // source path)
            $result = call_user_func(
                array($this->__config['compiler'], 'compile'),
                $file
            );
        } else {
            // no compiling requested, use the source path
            $result = $file;
        }

        // is there a script from the compiler?
        if (! $result || $this->isError($result)) {
            // return an error, along with any error info
            // generated by the compiler.
            return $this->error(
                'ERR_COMPILER',
                array(
                    'template' => $tpl,
                    'compiler' => $result
                )
            );
        } else {
            // no errors, the result is a path to a script
            return $result;
        }
    }

    public function fetch($tpl = null, $data = array())
    {
        return parent::fetch($tpl);
    }

    public function display($tpl = null, $data = array())
    {
       foreach ($data as $key => $value) {
           $this->{$key} = $value;
       }
       parent::display($tpl);
       exit();
    }

} // cSavant3

if (!class_exists('a_tpl')) {
    
    class a_tpl extends a_savant3{}

    class a_tpl_plugin extends Savant3_Plugin
    {
        public function __construct()
        {
            return parent::__construct( func_get_args() );
        }

    } // cSavant3

    class a_tpl_filter extends Savant3_Filter
    {
        public function __construct()
        {
            return parent::__construct( func_get_args() );
        }

    } // cSavant3

} else { c_debug::notice('Other tpl class is already instantiate'); }
